import java.io.*

fun main() {
    val reader = BufferedReader(InputStreamReader(System.`in`))
    val writer = BufferedWriter(OutputStreamWriter(System.out))

    val (N, M) = reader.readLine().split(" ").map { it.toInt() }

    val adj = Array(N + 1) { mutableListOf<Int>() }

    repeat(M) {
        val (u, v) = reader.readLine().split(" ").map { it.toInt() }
        adj[u].add(v)
        adj[v].add(u)
    }

    val visited = BooleanArray(N + 1)

    val component = mutableListOf<Int>()

    fun dfs(node: Int) {
        visited[node] = true
        component.add(node)
        for (neighbor in adj[node]) {
            if (!visited[neighbor]) {
                dfs(neighbor)
            }
        }
    }

    dfs(1)

    writer.write("${component.size}\n")
    writer.write("${component.sorted().joinToString(" ")}\n")

    writer.flush()
}
